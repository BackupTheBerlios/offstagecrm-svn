/*
Offstage CRM: Enterprise Database for Arts Organizations
This file Copyright (c) 2006 by Robert Fischer

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
/*
 * EQueryBrowser.java
 *
 * Created on July 3, 2005, 1:31 PM
 */

package offstage.gui;

import java.sql.*;
import java.io.*;
import javax.swing.*;
import citibob.swing.table.*;
import java.util.prefs.*;
import offstage.FrontApp;
import offstage.EQueryBrowserApp;
import offstage.db.FullEntityDbModel;
import offstage.db.EntityListTableModel;
import offstage.equery.*;
import citibob.multithread.*;

/**
 *
 * @author  citibob
 */
public class EQueryBrowser extends javax.swing.JPanel {

FrontApp fapp;
EQueryBrowserApp app;
EntityListTableModel testResults;
//Statement st;
ActionRunner runner;

/** Creates new form EQueryBrowser */
public EQueryBrowser() {
	initComponents();
	jFileChooser1.setControlButtonsAreShown(false);
}

public void initRuntime(FrontApp fapp)
throws SQLException
{
	this.runner = fapp.getGuiRunner();
	this.fapp = fapp;
	this.app = fapp.getEqueryBrowserApp();
	app.addListener(new AppListener());
	eQueryEditor1.initRuntime(app.getQueryModel(), fapp.getSwingerMap());
	//saveAsName = null;
	lQueryName.setText("");

	testResults = new EntityListTableModel();
	tTestResults.initRuntime(testResults);

	tMailings.initRuntime(fapp.getMailingModel());
	
	jFileChooser1.addChoosableFileFilter(new JqyFilter());
	
//	ColPermuteTableModel model = new ColPermuteTableModel(
//		app.getMailingidsSb(),
//		new String[] {"Name", "Create Date"},
//		new String[] {"name", "created"});
//	model.setEditable(new boolean[] {false, false});
//	tMailings.setModel(model);
////	tMailings.setModel(app.getMailingidsSb());
}

//String prefix;
//Preferences prefs;
//static final String CURRENT_DIRECTORY = ".currentDirectory";
//public void setPrefs(String prefix, Preferences prefs)
//{
//	this.prefs = prefs;
//	this.prefix = prefix;
//	String curDir = prefs.get(prefix + CURRENT_DIRECTORY, null);
//	if (curDir != null) jFileChooser1.setCurrentDirectory(new File(curDir));
//	
//}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        info.clearthought.layout.TableLayout _tableLayoutInstance;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jToolBar3 = new javax.swing.JToolBar();
        bOpenQuery = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tTestResults = new offstage.gui.FamilyTable();
        jToolBar2 = new javax.swing.JToolBar();
        bEditRecord = new javax.swing.JButton();
        bTransferEntities = new javax.swing.JButton();
        bMakeMailing = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tMailings = new offstage.gui.MailingidsTable();
        EditorPanel = new javax.swing.JPanel();
        eQueryEditor1 = new offstage.equery.swing.EQueryEditor();
        jPanel4 = new javax.swing.JPanel();
        lQueryName = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        bNewQuery = new javax.swing.JButton();
        bSaveQueryAs = new javax.swing.JButton();
        bSaveQuery = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bTestQuery = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jPanel3.add(jFileChooser1, java.awt.BorderLayout.CENTER);

        bOpenQuery.setText("Open");
        bOpenQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenQueryActionPerformed(evt);
            }
        });

        jToolBar3.add(bOpenQuery);

        jPanel3.add(jToolBar3, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jPanel3);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jPanel1.setLayout(new java.awt.BorderLayout());

        tTestResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tTestResults);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bEditRecord.setText("Edit");
        bEditRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditRecordActionPerformed(evt);
            }
        });

        jToolBar2.add(bEditRecord);

        bTransferEntities.setText(">> People");
        bTransferEntities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTransferEntitiesActionPerformed(evt);
            }
        });

        jToolBar2.add(bTransferEntities);

        bMakeMailing.setText("Make Mailing");
        bMakeMailing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMakeMailingActionPerformed(evt);
            }
        });

        jToolBar2.add(bMakeMailing);

        jPanel1.add(jToolBar2, java.awt.BorderLayout.SOUTH);

        jSplitPane3.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        tMailings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tMailings);

        jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jSplitPane3.setRightComponent(jPanel2);

        jSplitPane2.setRightComponent(jSplitPane3);

        EditorPanel.setLayout(new java.awt.BorderLayout());

        EditorPanel.add(eQueryEditor1, java.awt.BorderLayout.CENTER);

        _tableLayoutInstance = new info.clearthought.layout.TableLayout();
        _tableLayoutInstance.setHGap(0);
        _tableLayoutInstance.setVGap(0);
        _tableLayoutInstance.setColumn(new double[]{info.clearthought.layout.TableLayout.PREFERRED,info.clearthought.layout.TableLayout.PREFERRED});
        _tableLayoutInstance.setRow(new double[]{info.clearthought.layout.TableLayout.PREFERRED,info.clearthought.layout.TableLayout.PREFERRED});
        jPanel4.setLayout(_tableLayoutInstance);

        lQueryName.setText("lQueryName");
        jPanel4.add(lQueryName, new info.clearthought.layout.TableLayoutConstraints(0, 0, 0, 0, info.clearthought.layout.TableLayout.FULL, info.clearthought.layout.TableLayout.FULL));

        bNewQuery.setText("New Query");
        bNewQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bNewQuery);

        bSaveQueryAs.setText("Save As");
        bSaveQueryAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveQueryAsActionPerformed(evt);
            }
        });

        jToolBar1.add(bSaveQueryAs);

        bSaveQuery.setText("Save");
        bSaveQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bSaveQuery);

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        jToolBar1.add(bDelete);

        bTestQuery.setText("Test");
        bTestQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTestQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bTestQuery);

        jPanel4.add(jToolBar1, new info.clearthought.layout.TableLayoutConstraints(0, 1, 0, 1, info.clearthought.layout.TableLayout.FULL, info.clearthought.layout.TableLayout.FULL));

        EditorPanel.add(jPanel4, java.awt.BorderLayout.NORTH);

        jSplitPane2.setTopComponent(EditorPanel);

        jSplitPane1.setRightComponent(jSplitPane2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

	private void bTransferEntitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTransferEntitiesActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			EntityListTableModel res = fapp.getSimpleSearchResults();
			EQuery eqy = app.getEQuery();
			String sql = eqy.getSql(app.getSchema());
			res.setRows(st, sql, null);
			fapp.setScreen(FrontApp.PEOPLE_SCREEN);
		}});
	}//GEN-LAST:event_bTransferEntitiesActionPerformed

	private void bEditRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditRecordActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			int selRow = tTestResults.getSelectedRow();
			int entityID = testResults.getEntityID(selRow);

			FullEntityDbModel dm = fapp.getFullEntityDm();
			dm.setKey(entityID);
			dm.doSelect(st);
			fapp.setScreen(FrontApp.PEOPLE_SCREEN);
		}});
	}//GEN-LAST:event_bEditRecordActionPerformed

	private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
		runner.doRun(new ERunnable() {
		public void run() throws Exception {
			File fname = jFileChooser1.getSelectedFile();
			if (fname == null || !fname.isFile()) return;
			java.awt.Component frame = EQueryBrowser.this;
			while (frame != null && java.awt.Frame.class.isInstance(frame))
				frame = frame.getParent();
			String message = "Do you really wish to delete the query\n" + fname.toString();
			int answer = JOptionPane.showConfirmDialog(frame, message);
			if (answer == JOptionPane.YES_OPTION) {
				fname.delete();
				jFileChooser1.rescanCurrentDirectory();
			}
		}});
	}//GEN-LAST:event_bDeleteActionPerformed

	private void bOpenQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenQueryActionPerformed
		runner.doRun(new ERunnable() {
		public void run() throws Exception {
			File fname = jFileChooser1.getSelectedFile();
			app.loadEQuery(fname);
		}});
	}//GEN-LAST:event_bOpenQueryActionPerformed

private void bMakeMailingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMakeMailingActionPerformed
	runner.doRun(new StRunnable() {
	public void run(Statement st) throws Exception {
		app.makeMailing(st, null);
	}});
}//GEN-LAST:event_bMakeMailingActionPerformed

private void bTestQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTestQueryActionPerformed
	runner.doRun(new StRunnable() {
	public void run(Statement st) throws Exception {
		EQuery eqy = app.getEQuery();
		String sql = eqy.getSql(app.getSchema());
		testResults.setRows(st, sql, null);
	}});
}//GEN-LAST:event_bTestQueryActionPerformed

private void bNewQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewQueryActionPerformed
	runner.doRun(new ERunnable() {
	public void run() throws Exception {
		EQuery eq = new EQuery();
		eq.appendClause(new Clause());
		app.setEQuery(eq, null);
	}});
// TODO add your handling code here:
}//GEN-LAST:event_bNewQueryActionPerformed

private void bSaveQueryAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveQueryAsActionPerformed
	runner.doRun(new ERunnable() {
	public void run() throws Exception {
		//Create a file chooser
		File curDir = jFileChooser1.getCurrentDirectory();
		final JFileChooser fc = new JFileChooser(curDir);
		fc.addChoosableFileFilter(new JqyFilter());
		int returnVal = fc.showSaveDialog(EQueryBrowser.this);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File f = fc.getSelectedFile();
			String saveAs = f.getPath();
			System.out.println("extension = " + getExtension(f));
			String ext = getExtension(f);
			if (ext == null || "".equals(ext)) saveAs += ".jqy";
			app.saveEQuery(new File(saveAs));
			jFileChooser1.rescanCurrentDirectory();
		}
	}});
}//GEN-LAST:event_bSaveQueryAsActionPerformed

private void bSaveQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveQueryActionPerformed
	runner.doRun(new ERunnable() {
	public void run() throws Exception {
System.out.println("Saving Query");
		app.saveEQuery(null);
		jFileChooser1.rescanCurrentDirectory();
	}});
}//GEN-LAST:event_bSaveQueryActionPerformed

private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
//	try {
//		String cmd = evt.getActionCommand();
//System.out.println("JFileChooserEvent: " + cmd);
//		if (JFileChooser.APPROVE_SELECTION.equals(cmd)) {
//			File fname = jFileChooser1.getSelectedFile();
//			app.loadEQuery(fname);
//		} else if (JFileChooser.CANCEL_SELECTION.equals(cmd)) {
//			// Nothing here... maye we should close this box... ?
//		}
//	} catch(IOException e) {
//		System.out.println(e);
//	}
}//GEN-LAST:event_jFileChooser1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EditorPanel;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bEditRecord;
    private javax.swing.JButton bMakeMailing;
    private javax.swing.JButton bNewQuery;
    private javax.swing.JButton bOpenQuery;
    private javax.swing.JButton bSaveQuery;
    private javax.swing.JButton bSaveQueryAs;
    private javax.swing.JButton bTestQuery;
    private javax.swing.JButton bTransferEntities;
    private offstage.equery.swing.EQueryEditor eQueryEditor1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JLabel lQueryName;
    private offstage.gui.MailingidsTable tMailings;
    private offstage.gui.FamilyTable tTestResults;
    // End of variables declaration//GEN-END:variables
// ================================================================
private class AppListener extends EQueryBrowserApp.Adapter
{
	public void eQueryChanged()
	{
		File f = app.getEQueryFname();
		lQueryName.setText(f == null ? "<no query>" : f.toString());
	}
//	public void mailingIDChanged() {
//		try {
//System.out.println("mailingIDChanged");
//			tMailings.setModel(app.newMailingTableModel());
////			int mailingID = app.getMailingID();		
//		} catch(SQLException e) {
//			System.out.println(e);
//		}
//	}
}


/*
 * Get the extension of a file.
 */
private static String getExtension(File f) {
	String ext = null;
	String s = f.getName();
	int i = s.lastIndexOf('.');

	if (i > 0 &&  i < s.length() - 1) {
		ext = s.substring(i+1).toLowerCase();
	}
	return ext;
}
	
private class JqyFilter extends javax.swing.filechooser.FileFilter
{
	public boolean accept(File f) {
		if (f.isDirectory()) {
			return true;
		}

		String extension = getExtension(f);
		if (extension != null) {
			if (extension.equals("jqy")) {
				return true;
			} else {
				return false;
			}
		}

		return false;
	}
	public String getDescription() {
        return "Queries";
    }
}

}
