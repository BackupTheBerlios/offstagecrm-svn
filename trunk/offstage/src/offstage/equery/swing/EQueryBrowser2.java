/*
Offstage CRM: Enterprise Database for Arts Organizations
This file Copyright (c) 2006 by Robert Fischer

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
/*
 * EQueryBrowser.java
 *
 * Created on July 3, 2005, 1:31 PM
 */

package offstage.equery.swing;

import java.sql.*;
import java.io.*;
import javax.swing.*;
import citibob.swing.table.*;
import java.util.prefs.*;
import offstage.*;
import offstage.db.FullEntityDbModel;
import offstage.db.EntityListTableModel;
import offstage.equery.*;
import citibob.multithread.*;
import offstage.gui.*;
import citibob.swing.typed.*;

/**
 *
 * @author  citibob
 */
public class EQueryBrowser2 extends javax.swing.JPanel {

FrontApp fapp;
EQueryModel2 app;
EntityListTableModel testResults;
//Statement st;
ActionRunner runner;

/** Creates new form EQueryBrowser */
public EQueryBrowser2() {
	initComponents();
}

public void initRuntime(FrontApp fapp)
throws SQLException
{
	SwingerMap smap = fapp.getSwingerMap();
	this.runner = fapp.getGuiRunner();
	this.fapp = fapp;
	this.app = fapp.getEQueryModel2();
	eQueryEditor.initRuntime(app.oneQueryTableModel, smap);
	TypedWidgetBinder.bindRecursive(editorPanel, app.oneQueryRow, fapp.getSwingerMap());
	tQueries.setModelU(app.equeries,
		new String[] {"ID", "Name", "Modified"},
		new String[] {"equeryid", "name", "lastmodified"},
		new boolean[] {false, false, false},
		fapp.getSwingerMap());
		
		
		
	tQueries.addMouseListener(new DClickTableMouseListener(tQueries) {
	public void doubleClicked(final int row) {
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			app.saveCurQuery(st);
			tQueries.getSelectionModel().setSelectionInterval(row, row);
			app.oneQueryRow.setCurRow(row);
		}});
	}});

		
		
		
	testResults = new EntityListTableModel();
	tTestResults.initRuntime(testResults);
//	tMailings.initRuntime(fapp.getMailingModel());
	
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane4 = new javax.swing.JSplitPane();
        editorPanel = new javax.swing.JPanel();
        eQueryEditor = new offstage.equery.swing.EQueryEditor();
        jToolBar1 = new javax.swing.JToolBar();
        bNewQuery = new javax.swing.JButton();
        bSaveQuery = new javax.swing.JButton();
        bTestQuery = new javax.swing.JButton();
        bUndo = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        jTypedTextField1 = new citibob.swing.typed.JTypedTextField();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        bRefresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tQueries = new citibob.jschema.swing.SchemaBufTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tTestResults = new offstage.gui.FamilyTable();
        jToolBar2 = new javax.swing.JToolBar();
        bEditRecord = new javax.swing.JButton();
        bTransferEntities = new javax.swing.JButton();
        bMakeMailing = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        editorPanel.setLayout(new java.awt.BorderLayout());

        eQueryEditor.setColName("equery");
        editorPanel.add(eQueryEditor, java.awt.BorderLayout.CENTER);

        bNewQuery.setText("New Query");
        bNewQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNewQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bNewQuery);

        bSaveQuery.setText("Save");
        bSaveQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bSaveQuery);

        bTestQuery.setText("Test");
        bTestQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTestQueryActionPerformed(evt);
            }
        });

        jToolBar1.add(bTestQuery);

        bUndo.setText("Undo");
        bUndo.setActionCommand("Undo");
        bUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUndoActionPerformed(evt);
            }
        });

        jToolBar1.add(bUndo);

        bDelete.setText("Delete");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        jToolBar1.add(bDelete);

        editorPanel.add(jToolBar1, java.awt.BorderLayout.SOUTH);

        jTypedTextField1.setText("jTypedTextField1");
        jTypedTextField1.setColName("name");
        editorPanel.add(jTypedTextField1, java.awt.BorderLayout.NORTH);

        jSplitPane4.setTopComponent(editorPanel);

        jPanel3.setLayout(new java.awt.BorderLayout());

        bRefresh.setText("Refresh");
        bRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefreshActionPerformed(evt);
            }
        });

        jToolBar3.add(bRefresh);

        jPanel3.add(jToolBar3, java.awt.BorderLayout.SOUTH);

        tQueries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tQueries);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane5.setLeftComponent(jPanel3);

        jPanel1.setLayout(new java.awt.BorderLayout());

        tTestResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tTestResults);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bEditRecord.setText("Edit");
        bEditRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEditRecordActionPerformed(evt);
            }
        });

        jToolBar2.add(bEditRecord);

        bTransferEntities.setText(">> People");
        bTransferEntities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTransferEntitiesActionPerformed(evt);
            }
        });

        jToolBar2.add(bTransferEntities);

        bMakeMailing.setText("Make Mailing");
        bMakeMailing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMakeMailingActionPerformed(evt);
            }
        });

        jToolBar2.add(bMakeMailing);

        jPanel1.add(jToolBar2, java.awt.BorderLayout.SOUTH);

        jSplitPane5.setRightComponent(jPanel1);

        jSplitPane4.setBottomComponent(jSplitPane5);

        add(jSplitPane4, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents

	private void bRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefreshActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			saveCurQuery(st);
			app.equeries.doSelect(st);
		}});
	}//GEN-LAST:event_bRefreshActionPerformed

	private void bTransferEntitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTransferEntitiesActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			EntityListTableModel res = fapp.getSimpleSearchResults();
			EQuery eqy = app.oneQueryTableModel.getQuery();
			String sql = eqy.getSql(app.schema);
			res.setRows(st, sql, null);
			fapp.setScreen(FrontApp.PEOPLE_SCREEN);
		}});
	}//GEN-LAST:event_bTransferEntitiesActionPerformed

	private void bEditRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEditRecordActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			int selRow = tTestResults.getSelectedRow();
			int entityID = testResults.getEntityID(selRow);

			FullEntityDbModel dm = fapp.getFullEntityDm();
			dm.setKey(entityID);
			dm.doSelect(st);
			fapp.setScreen(FrontApp.PEOPLE_SCREEN);
		}});
	}//GEN-LAST:event_bEditRecordActionPerformed

	private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
		runner.doRun(new StRunnable() {
		public void run(Statement st) throws Exception {
			saveCurQuery(st);
//			int row = tQueries.getSelectedRow();
			int row = app.oneQueryRow.getCurRow();
			if (row >= 0) {
				app.equeries.getSchemaBuf().deleteRow(row);
				app.equeries.doUpdate(st);
//				app.equeries.doSelect(st);
			}
		}});
	}//GEN-LAST:event_bDeleteActionPerformed

private void bMakeMailingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMakeMailingActionPerformed
	runner.doRun(new StRunnable() {
	public void run(Statement st) throws Exception {
		app.makeMailing(st, app.oneQueryTableModel.getQuery(),
			(String)app.oneQueryRow.get(app.oneQueryRow.findColumn("name")));
		fapp.setScreen(FrontApp.MAILINGS_SCREEN);
	}});
}//GEN-LAST:event_bMakeMailingActionPerformed

private void bTestQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTestQueryActionPerformed
	runner.doRun(new StRunnable() {
	public void run(Statement st) throws Exception {
		saveCurQuery(st);
		EQuery eqy = app.oneQueryTableModel.getQuery();
		//EQuery eqy = app.getEQuery();
		String sql = eqy.getSql(app.schema);
		testResults.setRows(st, sql, null);
	}});
}//GEN-LAST:event_bTestQueryActionPerformed

private void bNewQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNewQueryActionPerformed
	runner.doRun(new ERunnable() {
	public void run() throws Exception {
		int row = app.equeries.getSchemaBuf().insertRow(-1,
			new String[] {"name", "equery"},
			new String[] {"New Query", app.xmlBlankQuery});
		app.oneQueryRow.setCurRow(row);
	}});
// TODO add your handling code here:
}//GEN-LAST:event_bNewQueryActionPerformed

private void bUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUndoActionPerformed
	runner.doRun(new ERunnable() {
	public void run() throws Exception {
		app.undoCurQuery();
	}});
}//GEN-LAST:event_bUndoActionPerformed

void saveCurQuery(Statement st) throws Exception
{
		eQueryEditor.commitValue();
		app.saveCurQuery(st);	
}

private void bSaveQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveQueryActionPerformed
	runner.doRun(new StRunnable() {
	public void run(Statement st) throws Exception {
		saveCurQuery(st);
	}});
}//GEN-LAST:event_bSaveQueryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bEditRecord;
    private javax.swing.JButton bMakeMailing;
    private javax.swing.JButton bNewQuery;
    private javax.swing.JButton bRefresh;
    private javax.swing.JButton bSaveQuery;
    private javax.swing.JButton bTestQuery;
    private javax.swing.JButton bTransferEntities;
    private javax.swing.JButton bUndo;
    private offstage.equery.swing.EQueryEditor eQueryEditor;
    private javax.swing.JPanel editorPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private citibob.swing.typed.JTypedTextField jTypedTextField1;
    private citibob.jschema.swing.SchemaBufTable tQueries;
    private offstage.gui.FamilyTable tTestResults;
    // End of variables declaration//GEN-END:variables
// ================================================================

}
